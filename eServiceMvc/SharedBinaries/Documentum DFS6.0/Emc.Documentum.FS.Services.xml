<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Emc.Documentum.FS.Services</name>
    </assembly>
    <members>
        <member name="T:Emc.Documentum.FS.Services.Bpm.WorkflowServicePortClient">
            <exclude/>
            <exclude/>
        </member>
        <member name="T:Emc.Documentum.FS.Services.Bpm.IWorkflowService">
            <summary>
            IWorkflowService provides functionality to query available process templates, and start process.
            </summary>    
        </member>
        <member name="M:Emc.Documentum.FS.Services.Bpm.IWorkflowService.GetProcessTemplates(System.String,System.String,System.String)">
            <summary>
            Obtain a list of installed process templates in the repository. If folderPath is passed in, only
            the process templates within the folderPath will be returned.
            </summary>
            <param name="repositoryName"></param>
            <param name="folderPath"></param>
            <param name="additionalAttrs">additionalAttrs a comma separated list of attribute names</param>
            <returns><see cref="T:Emc.Documentum.FS.DataModel.Core.DataPackage"/> to the installed templates.</returns>
        </member>
        <member name="M:Emc.Documentum.FS.Services.Bpm.IWorkflowService.GetProcessInfo(Emc.Documentum.FS.DataModel.Core.ObjectIdentity)">
            <summary>
            Obtain a <see cref="T:Emc.Documentum.FS.DataModel.Core.Bpm.ProcessInfo"/> object for a specific process template in the repository.
            </summary>
            <param name="process">process <see cref="T:Emc.Documentum.FS.DataModel.Core.ObjectIdentity"/> to the process template. ObjectId is expected from this identity.</param>
            <returns>A <see cref="T:Emc.Documentum.FS.DataModel.Core.Bpm.ProcessInfo"/> object for setting the start process parameters.</returns>
        </member>
        <member name="M:Emc.Documentum.FS.Services.Bpm.IWorkflowService.StartProcess(Emc.Documentum.FS.DataModel.Core.Bpm.ProcessInfo)">
            <summary>
            Create and execute process.<p/>
            
            A process instance is a runtime instance of a dm_process object.  Process
            objects store workflow definitions in the Documentum server.<para/>
            To start a process, the process template must be in the installed state
            and the user must have Relate and Execute permissions on
            the process template.<para/>
            This call should occur after a call to <see cref="M:Emc.Documentum.FS.Services.Bpm.IWorkflowService.GetProcessInfo(Emc.Documentum.FS.DataModel.Core.ObjectIdentity)"/> which
            provides the process template that the process is based on.
            </summary>
            <param name="info"><see cref="T:Emc.Documentum.FS.DataModel.Core.Bpm.ProcessInfo"/> object that has be initialized with start process parameters.</param>
            <returns><see cref="T:Emc.Documentum.FS.DataModel.Core.ObjectIdentity"/> of the process instance.</returns>
        </member>
        <member name="T:Emc.Documentum.FS.Services.Bpm.WorkflowServicePort">
            <exclude/>
        </member>
        <member name="T:Emc.Documentum.FS.Services.Bpm.getProcessTemplatesRequest">
            <exclude/>
        </member>
        <member name="T:Emc.Documentum.FS.Services.Bpm.getProcessTemplatesResponse">
            <exclude/>
        </member>
        <member name="T:Emc.Documentum.FS.Services.Bpm.getProcessInfoRequest">
            <exclude/>
        </member>
        <member name="T:Emc.Documentum.FS.Services.Bpm.getProcessInfoResponse">
            <exclude/>
        </member>
        <member name="T:Emc.Documentum.FS.Services.Bpm.startProcessRequest">
            <exclude/>
        </member>
        <member name="T:Emc.Documentum.FS.Services.Bpm.startProcessResponse">
            <exclude/>
        </member>
        <member name="T:Emc.Documentum.FS.Services.Bpm.WorkflowServicePortChannel">
            <exclude/>
        </member>
        <member name="T:Emc.Documentum.FS.Services.Core.ObjectServicePortClient">
            <exclude/>
            <exclude/>
        </member>
        <member name="T:Emc.Documentum.FS.Services.Core.IObjectService">
            <summary>
            ObjectService Provides fundamental operations for creating, getting, updating, and deleting 
            repository objects, as  well as copy and move operations<para/>
            
            The object service provides a 
            set of basic operations on repository objects, in cases where the client does not need  to 
            explicitly use the version control system. Each operation within the object service uses 
            default behaviors as  relates to object versions that are appropriate for the specific operation. 
            All of the object services can operate  on multiple objects (contained in either a DataPackage or an ObjectIdentitySet), 
            enabling clients to optimize service  usage by minimizing the number of service interactions.
            <seealso cref="T:Emc.Documentum.FS.DataModel.Core.OperationOptions"/>
            <seealso cref="T:Emc.Documentum.FS.DataModel.Core.Profiles.Profile"/>
            </summary>    
        </member>
        <member name="M:Emc.Documentum.FS.Services.Core.IObjectService.CreatePath(Emc.Documentum.FS.DataModel.Core.ObjectPath,System.String)">
            <summary>
            The createPath operation creates a folder structure (from the cabinet down) in a repository. Notice that only  "object_name" property will be set for each object.<para/>  If any of the folders specified in the path exist, no exception is thrown. This allows you to use the operation  to create the complete path, or to add new folders to an existing path.
            </summary>
            <param name="objectPath">Contains a String in the form ??/cabinetName/folderName...?? that describes the complete path to create.</param>
            <param name="repositoryName">the repository name where the objects will be created.</param>
            <returns>Returns the ObjectIdentity of the final object in the path. For example, if the path is          ??/cabinetName/childFolder1/childFolder2??, the operation will return the ObjectIdentity of childFolder2.</returns>        
        </member>
        <member name="M:Emc.Documentum.FS.Services.Core.IObjectService.GetObjectContentUrls(Emc.Documentum.FS.DataModel.Core.ObjectIdentitySet)">
            <summary>
            Returns an array of ContentUrl objects based on specified object identities.  Notice that more than one
            ContentUrl can be returned per object identity.
            </summary>
            <param name="forObjects">A collection of ObjectIdentity instances for which to obtain UrlContent objects.</param>
            <returns>List&lt;ObjectContentSet&gt;. Each ObjectContentSet contains a list of UrlContent objects.</returns>        
        </member>
        <member name="M:Emc.Documentum.FS.Services.Core.IObjectService.Get(Emc.Documentum.FS.DataModel.Core.ObjectIdentitySet,Emc.Documentum.FS.DataModel.Core.OperationOptions)">
            <summary>
            The get operation retrieves a set of objects from the repository based on the contents of an ObjectIdentitySet.
            The get operation always returns the version of the object specified by ObjectIdentity; if the ObjectIdentity
            identifies a non-CURRENT version, the get operation returns the non-CURRENT version. The operation will also
            return related objects if instructed to do so by RelationshipProfile settings.
            </summary>
            <param name="forObjects">Contains a list of ObjectIdentity instances specifying the repository objects to be retrieved.</param>
            <param name="options">
            An object containing profiles and properties that specify operation behaviors. If this object
            is null, default operation behaviors will take effect.
            OperationOptions can contain PropertyProfile, ContentProfile, PermissionProfile,
            RelationshipProfile that will be used to populate the returned DataPackage. Also it can
            contain ContentTransferProfile to specify the specifics of content transfer.
            </param>
            <returns>fully populated DataObjects and their ReferenceRelations in case filter mode is not</returns>
        </member>
        <member name="M:Emc.Documentum.FS.Services.Core.IObjectService.Copy(Emc.Documentum.FS.DataModel.Core.ObjectIdentitySet,Emc.Documentum.FS.DataModel.Core.ObjectLocation,Emc.Documentum.FS.DataModel.Core.DataPackage,Emc.Documentum.FS.DataModel.Core.OperationOptions)">
            <summary>
            The copy operation copies a set of repository objects from one location to another, either within a single
            repository, or from one repository to another. During the copy operation, the service can optionally make
            modifications to the objects being copied.<para/>
            
            Note: For the service to copy an object from one repository to another, the ServiceContext must be set up to
            provide the service with access to both repositories. This can be done by setting up a separate
            RepositoryIdentity for each repository, or by use of a BasicIdentity, which provides default user credentials for
            multiple repositories. For more information on RepositoryIdentity and BasicIdentity, see DFS Development Guide,
            Identities, page 48.
            <para/>
            Note: DataPackage can contain operation specific properties.
            </summary>
            <param name="fromObjects">is a set of identities pointing to objects that must be copied.</param>
            <param name="targetLocation">
            Contains an ObjectIdentity that identifies the location (a cabinet or folder) into which
            the repository objects are to be copied. If objects do not require a "parent" location.
            Location object can be used to specify target repository.
            </param>
            <param name="modifyObjects">optional package of data objects that need to be modified during a copy.  It is not
            necessary to have as many "modify objects" as "from identities".  During processing of
            each "from identity", data object with the same identity will be used to change the
            attributes and relationships for the new object.
            </param>
            <param name="options">
            An object containing profiles and properties that specify operation behaviors. If this object
            is null, default operation behaviors will take effect.
            It can contain CopyProfile that will modify the behaviour of the operation.
            OperationOptions can also contain PropertyProfile, ContentProfile, PermissionProfile,
            RelationshipProfile that will be used to populate the returned DataPackage. Also it can
            contain ContentTransferProfile to specify the specifics of content transfer.
            </param>
            <returns>
            target DataPackage with a list of objects created. By default, it will only return
            ObjectIdentity of the DataObjects with no ReferenceRelations. PropertyProfile and
            ContentProfile settings can be used to specify what data is populated.
            </returns>
        </member>
        <member name="M:Emc.Documentum.FS.Services.Core.IObjectService.Delete(Emc.Documentum.FS.DataModel.Core.ObjectIdentitySet,Emc.Documentum.FS.DataModel.Core.OperationOptions)">
            <summary>
            Operation deletes a set of objects from the repository. By default, for each object that it deletes, it deletes
            all versions. The specific behaviors of the delete operation are controlled by a DeleteProfile, which should be
            passed to the operation as part of OperationOptions.
            <para/>
            Note: DataPackage can contain operation specific properties
            </summary>
            <param name="objectsToDelete">A collection of ObjectIdentity instances that uniquely identify repository objects to be deleted</param>
            <param name="options">
            An object containing profiles and properties that specify operation behaviors. If this object
            is null, default operation behaviors will take effect.
            It can contain DeleteProfile that will modify the behaviour of the operation.
            OperationOptions can also contain PropertyProfile, ContentProfile, PermissionProfile,
            RelationshipProfile that will be used to populate the returned DataPackage. Also it can
            contain ContentTransferProfile to specify the specifics of content transfer.
            </param>
        </member>
        <member name="M:Emc.Documentum.FS.Services.Core.IObjectService.Create(Emc.Documentum.FS.DataModel.Core.DataPackage,Emc.Documentum.FS.DataModel.Core.OperationOptions)">
            <summary>
            Creates a set of new repository objects based on the DataObject instances contained in a DataPackage passed to  the operation. Because each DataObject represents a new repository object, its ObjectIdentity is populated with  only a repository name. Content Server assigns a unique object identifier when the object is created in the  repository.<para/>   To create an object in a specific location, or to create objects that have relationships to one another defined  in the repository, the client can define Relationship instances in a DataObject passed to the operation. The most  common example of this would be to create a Relationship between a newly created document and the folder in which  it is to be created.  All specified related objects are also created.  All content is automatically imported.  <para/>  Note: DataPackage can contain operation specific properties.
            </summary>
            <param name="dataPackage">contains DataObjects that will be created</param>
            <param name="options">An object containing profiles and properties that specify operation behaviors. If this object is null, default operation behaviors will take effect.                     OperationOptions can contain PropertyProfile, ContentProfile, PermissionProfile,                     RelationshipProfile that will be used to populate the returned DataPackage. Also it can contain ContentTransferProfile to specify the specifics of content transfer.</param>
            <returns>target DataPackage with a list of objects created. By default, it will only return ObjectIdentity of the DataObjects with no ReferenceRelations.</returns>
        </member>
        <member name="M:Emc.Documentum.FS.Services.Core.IObjectService.Update(Emc.Documentum.FS.DataModel.Core.DataPackage,Emc.Documentum.FS.DataModel.Core.OperationOptions)">
            <summary>
            The update operation updates a set of repository objects using data supplied in a set of DataObject instances
            passed in a DataPackage. The update operation will only update the CURRENT version of an object. If passed an
            ObjectIdentity that identifies a non-CURRENT object, the operation will throw an exception. The updated
            repository object will be saved as the CURRENT version.<para/>
            
            The ObjectIdentity of each DataObject passed to the update operation must uniquely identify an existing     
            repository object. The DataObject instances can contain updates to properties, content, and relationships, and
            only needs to include data that requires update.<para/>
            
            If a DataObject contains ReferenceRelationship instances, the corresponding relationships are created or updated
            in the repository. The update operation can also remove existing relationships. It can therefore be used,
            for example, to unlink an object from a folder and link it into another folder. If the DataObject contains
            ObjectRelationship instances, then the related objects are either updated or created, depending on whether they
            already exist in the repository. If the object does not exist, it is created; if it does exist, it is updated.<para/>
            Updates all data object in the data package using the specified target repository. All specified related objects are 
            also updated.  All content is automatically saved as CURRENT as well.<para/>
            
            Note: DataPackage can contain operation specific properties.
            </summary>
            <param name="dataPackage">A collection of DataObject instances that contain modifications to repository objects. The
            ObjectIdentity of each DataObject instance must uniquely identity the repository object to
            update. The DataObject instance need only contain data that is to be modified on the
            repository object; data that is to remain unchanged need not be supplied.
            </param>
            <param name="options">
            An object containing profiles and properties that specify operation behaviors. If this object
            is null, default operation behaviors will take effect.
            OperationOptions can contain PropertyProfile, ContentProfile, PermissionProfile,
            RelationshipProfile that will be used to populate the returned DataPackage. Also it can
            contain ContentTransferProfile to specify the specifics of content transfer.
            </param>
            <returns>DataPackage, which by default is populated with DataObject instances that contain only an ObjectIdentity.</returns>
        </member>
        <member name="M:Emc.Documentum.FS.Services.Core.IObjectService.Move(Emc.Documentum.FS.DataModel.Core.ObjectIdentitySet,Emc.Documentum.FS.DataModel.Core.ObjectLocation,Emc.Documentum.FS.DataModel.Core.ObjectLocation,Emc.Documentum.FS.DataModel.Core.DataPackage,Emc.Documentum.FS.DataModel.Core.OperationOptions)">
            <summary>
            The move operation moves a set of repository objects from one location into another, and provides the optional
            capability of updating the repository objects as they are moved. The move operation will only move the CURRENT
            version of an object. If passed an ObjectIdentity that identifies a non-CURRENT object, the operation will throw
            an exception (unless non-CURRENT objects are specifically permitted by a MoveProfile).
            <para/>
            Note: Move from one repository into another repository is not permitted.DataPackage can contain operation specific properties.
            </summary>
            <param name="fromObjects">A collection of ObjectIdentity instances that identify the repository objects to be moved.</param>
            <param name="sourceLocation">Contains an ObjectIdentity that identifies the location (a cabinet or folder) from which the repository objects are to be moved.</param>
            <param name="targetLocation">Contains an ObjectIdentity that identifies the location (a cabinet or folder) into which the repository objects are to be moved.</param>
            <param name="modifyObjects">Optionally contains a set of DataObject instances that contain modifications (such as changes to property values, content, or relationships) to all or some of the repository objects being moved. The ObjectIdentity of each DataObject must uniquely identify one of the moved objects. The modifications supplied in the DataObject are applied during the move operation.</param>
            <param name="options">An object containing profiles and properties that specify operation behaviors. If this object is null, default operation behaviors will take effect. It can contain MoveProfile that will modify the behaviour of the operation. OperationOptions can also contain PropertyProfile, ContentProfile, PermissionProfile, RelationshipProfile that will be used to populate the returned DataPackage. Also it can
            contain ContentTransferProfile to specify the specifics of content transfer.
            </param>
            <returns>a DataPackage containing one DataObject for each repository object created by the move operation. By default, each DataObject contains only the ObjectIdentity of the created object and no other data. The client can modify this behavior by using Profile objects if it requires more data about the moved objects.</returns>
        </member>
        <member name="M:Emc.Documentum.FS.Services.Core.IObjectService.Validate(Emc.Documentum.FS.DataModel.Core.DataPackage)">
            <summary>
            The validate operation validates a set of DataObject instances against repository data dictionary rules, testing
            whether the DataObject instances represent valid repository objects, and whether the DataObject properties
            represent valid repository properties.
            </summary>
            <param name="dataPackage">A collection of DataObject instances to be validated by the operation.</param>
            <returns>
            a ValidationInfoSet, which contains a list of ValidationInfo objects. Each ValidationInfo contains a
            DataObject and a list of any ValidationIssue instances that were raised by the operation. A
            ValidationIssue can be of enum type ERROR or WARNING.
            </returns>
        </member>
        <member name="T:Emc.Documentum.FS.Services.Core.ObjectServicePort">
            <exclude/>
        </member>
        <member name="T:Emc.Documentum.FS.Services.Core.createPathRequest">
            <exclude/>
        </member>
        <member name="T:Emc.Documentum.FS.Services.Core.createPathResponse">
            <exclude/>
        </member>
        <member name="T:Emc.Documentum.FS.Services.Core.getObjectContentUrlsRequest">
            <exclude/>
        </member>
        <member name="T:Emc.Documentum.FS.Services.Core.getObjectContentUrlsResponse">
            <exclude/>
        </member>
        <member name="T:Emc.Documentum.FS.Services.Core.getRequest">
            <exclude/>
        </member>
        <member name="T:Emc.Documentum.FS.Services.Core.getResponse">
            <exclude/>
        </member>
        <member name="T:Emc.Documentum.FS.Services.Core.copyRequest">
            <exclude/>
        </member>
        <member name="T:Emc.Documentum.FS.Services.Core.copyResponse">
            <exclude/>
        </member>
        <member name="T:Emc.Documentum.FS.Services.Core.deleteRequest">
            <exclude/>
        </member>
        <member name="T:Emc.Documentum.FS.Services.Core.deleteResponse">
            <exclude/>
        </member>
        <member name="T:Emc.Documentum.FS.Services.Core.createRequest">
            <exclude/>
        </member>
        <member name="T:Emc.Documentum.FS.Services.Core.createResponse">
            <exclude/>
        </member>
        <member name="T:Emc.Documentum.FS.Services.Core.updateRequest">
            <exclude/>
        </member>
        <member name="T:Emc.Documentum.FS.Services.Core.updateResponse">
            <exclude/>
        </member>
        <member name="T:Emc.Documentum.FS.Services.Core.moveRequest">
            <exclude/>
        </member>
        <member name="T:Emc.Documentum.FS.Services.Core.moveResponse">
            <exclude/>
        </member>
        <member name="T:Emc.Documentum.FS.Services.Core.validateRequest">
            <exclude/>
        </member>
        <member name="T:Emc.Documentum.FS.Services.Core.validateResponse">
            <exclude/>
        </member>
        <member name="T:Emc.Documentum.FS.Services.Core.ObjectServicePortChannel">
            <exclude/>
        </member>
        <member name="T:Emc.Documentum.FS.Services.Core.QueryServicePortClient">
            <exclude/>
            <exclude/>
        </member>
        <member name="T:Emc.Documentum.FS.Services.Core.IQueryService">
            <summary>
            Query service is a primary mechanism for retrieving information from a repository. Query Service 
            is general purpose  and uses execution semantics similar to the use of queries in an RDBMS. 
            The service returns a data set resulting from  the query to the user either directly or 
            through asynchronous caching.
            </summary>
        </member>
        <member name="M:Emc.Documentum.FS.Services.Core.IQueryService.Execute(Emc.Documentum.FS.DataModel.Core.Query.Query,Emc.Documentum.FS.DataModel.Core.Query.QueryExecution,Emc.Documentum.FS.DataModel.Core.OperationOptions)">
            <summary>
            The execute operation runs a query against data in a repository and returns the results to 
            the client as a  QueryResult containing a DataPackage.<p/>Executes a DQL query. 
            <p/>Notes: <para/>1) Only PassthroughQuery is supported for query parameter. <para/>
            2) Only one repository can be specified in the query otherwise an CoreServiceException 
            will be thrown.
            </summary>
            <param name="query">query object</param>
            <param name="execution">various parameters for query execution (cache strategy, max result, starting index, query id,...)</param>
            <param name="options">service options (override profiles were passed using ServiceContext)</param>
            <returns>QueryResult result of query execution. <p/>   
            <li> If succeed 
            QueryResult.status.repositoryStatusInfos[0].status == Status.SUCCESS</li>
            <li>If query have more elements than were returned QueryResult.status.hasMoreResults is set to true otherwise to false</li>
            </returns>
            <exception cref="T:Emc.Documentum.FS.Runtime.QueryValidationException"/>
            <exception cref="T:Emc.Documentum.FS.Runtime.CacheException"/>
            <exception cref="T:Emc.Documentum.FS.Runtime.CoreServiceException"/>
        </member>
        <member name="T:Emc.Documentum.FS.Services.Core.QueryServicePort">
            <exclude/>
        </member>
        <member name="T:Emc.Documentum.FS.Services.Core.executeRequest">
            <exclude/>
        </member>
        <member name="T:Emc.Documentum.FS.Services.Core.executeResponse">
            <exclude/>
        </member>
        <member name="T:Emc.Documentum.FS.Services.Core.QueryServicePortChannel">
            <exclude/>
        </member>
        <member name="T:Emc.Documentum.FS.Services.Core.SchemaServicePortClient">
            <exclude/>
            <exclude/>
        </member>
        <member name="T:Emc.Documentum.FS.Services.Core.ISchemaService">
            <summary>
            The schema service provides a mechanism for retrieving information regarding repository schemas. 
            A schema is a formal  definition of repository metadata, including types, properties, and relationships. 
            For the current release only the  DEFAULT repository schema is supported, which provides metadata 
            information concerning the data dictionary. In future  releases a repository will potentially 
            have an arbitrary number of named schemas. The schema service can be used for  creating a data 
            structure against which a client can perform offline validation of objects against repository metadata.
            </summary>
        </member>
        <member name="M:Emc.Documentum.FS.Services.Core.ISchemaService.GetTypeInfo(System.String,System.String,System.String,Emc.Documentum.FS.DataModel.Core.OperationOptions)">
            <summary>
            The getTypeInfo operation returns information about a repository type specified by name.
            </summary>
            <param name="repositoryName">Name of the repository to examine.</param>
            <param name="schemaName">optional parameter.  If specified, used to determine what schema to load. If null or "DEFAULT", default schema will be used.</param>
            <param name="typeName">The name of the type about which information is to be retrieved.</param>
            <param name="options">Contains profiles and properties that specify operation behaviors. In the case of this operation, a SchemaProfile can be passed to control the information returned.</param>
            <returns>list of all TypeInfo objects for the specified schema.</returns>
            <exception cref="T:Emc.Documentum.FS.Runtime.CoreServiceException"/>
        </member>
        <member name="M:Emc.Documentum.FS.Services.Core.ISchemaService.GetPropertyInfo(System.String,System.String,System.String,System.String,Emc.Documentum.FS.DataModel.Core.OperationOptions)">
            <summary>
            Retrieves property information for the specified property name. This method is typically used when schema was  partially loaded.
            </summary>
            <param name="repositoryName">Name of the repository to examine.</param>
            <param name="schemaName">optional parameter.  If specified, used to determine what schema to load. If null or "DEFAULT", default schema will be used.</param>
            <param name="typeName">The name of the type about which information is to be retrieved.</param>
            <param name="propertyName">The name of the repository property about which to retrieve information.</param>
            <param name="options">Contains profiles and properties that specify operation behaviors. In the case of this operation, a SchemaProfile can be passed to control the information returned.</param>
            <returns><see cref="T:Emc.Documentum.FS.DataModel.Core.Schema.PropertyInfo"/></returns>
            <exception cref="T:Emc.Documentum.FS.Runtime.CoreServiceException"/> 
        </member>
        <member name="M:Emc.Documentum.FS.Services.Core.ISchemaService.GetRepositoryInfo(System.String,Emc.Documentum.FS.DataModel.Core.OperationOptions)">
            <summary>
            Retrieves schema information about a repository specified by name, including a list of repository schemas. For the current release, only the DEFAULT repository schema is supported.
            </summary>
            <param name="repositoryName">Name of the repository to examine.</param>
            <param name="options">Contains profiles and properties that specify operation behaviors. In the case of this operation, a SchemaProfile can be passed to control the information returned.</param>
            <returns><see cref="T:Emc.Documentum.FS.DataModel.Core.Schema.RepositoryInfo"/></returns>
            <exception cref="T:Emc.Documentum.FS.Runtime.CoreServiceException"/>
        </member>
        <member name="M:Emc.Documentum.FS.Services.Core.ISchemaService.GetSchemaInfo(System.String,System.String,Emc.Documentum.FS.DataModel.Core.OperationOptions)">
            <summary>
            Retrieves schema information for the specified repository.  Note that some repository can have multiple schemas.  There is at least one (default) schema.  Note that options can include SchemaProfile to control amount of data  returned.
            </summary>
            <param name="repositoryName">Name of the repository to examine.</param>
            <param name="schemaName">Optional parameter. If specified, used to determine what schema to load.  If null or "DEFAULT", default schema will be used.</param>
            <param name="options">Contains profiles and properties that specify operation behaviors. In the case of this operation, a SchemaProfile can be passed to control the information returned.</param>
            <returns><see cref="T:Emc.Documentum.FS.DataModel.Core.Schema.SchemaInfo"/></returns>
            <exception cref="T:Emc.Documentum.FS.Runtime.CoreServiceException"/>
        </member>
        <member name="M:Emc.Documentum.FS.Services.Core.ISchemaService.GetDynamicAssistValues(System.String,System.String,System.String,System.String,Emc.Documentum.FS.DataModel.Core.Properties.PropertySet,Emc.Documentum.FS.DataModel.Core.OperationOptions)">
            <summary>
            Retrieves information about dynamic value assistance for a specified repository property. Value assistance  provides a list of valid values for a property, which are used to populate a pick list associated with a field on  a dialog box. Dynamic value assistance uses a query or a routine to list possible values for an attribute,  generally based on the values of other attributes, rather than a literal list. A value assist list (whether  literal or dynamic) can be complete, meaning that no values for the property are valid other than those in the  list, or incomplete, meaning that the user is allowed to provide values in addition to those in the list.
            </summary>
            <param name="repositoryName">Name of the repository to examine.</param>
            <param name="schemaName">optional parameter.  If specified, used to determine what schema to load.  If null or "DEFAULT", default schema will be used.</param>
            <param name="typeName">The name of the type about which information is to be retrieved.</param>
            <param name="propertyName">The name of the repository property about which to retrieve information.</param>
            <param name="propertySet">Optional parameter</param>
            <param name="options">Contains profiles and properties that specify operation behaviors. In the case of this operation,                  a SchemaProfile can be passed to control the information returned.</param>
            <returns>The value assistance information</returns>
            <exception cref="T:Emc.Documentum.FS.Runtime.CoreServiceException"/>
        </member>
        <member name="T:Emc.Documentum.FS.Services.Core.SchemaServicePort">
            <exclude/>
        </member>
        <member name="T:Emc.Documentum.FS.Services.Core.getTypeInfoRequest">
            <exclude/>
        </member>
        <member name="T:Emc.Documentum.FS.Services.Core.getTypeInfoResponse">
            <exclude/>
        </member>
        <member name="T:Emc.Documentum.FS.Services.Core.getPropertyInfoRequest">
            <exclude/>
        </member>
        <member name="T:Emc.Documentum.FS.Services.Core.getPropertyInfoResponse">
            <exclude/>
        </member>
        <member name="T:Emc.Documentum.FS.Services.Core.getRepositoryInfoRequest">
            <exclude/>
        </member>
        <member name="T:Emc.Documentum.FS.Services.Core.getRepositoryInfoResponse">
            <exclude/>
        </member>
        <member name="T:Emc.Documentum.FS.Services.Core.getSchemaInfoRequest">
            <exclude/>
        </member>
        <member name="T:Emc.Documentum.FS.Services.Core.getSchemaInfoResponse">
            <exclude/>
        </member>
        <member name="T:Emc.Documentum.FS.Services.Core.getDynamicAssistValuesRequest">
            <exclude/>
        </member>
        <member name="T:Emc.Documentum.FS.Services.Core.getDynamicAssistValuesResponse">
            <exclude/>
        </member>
        <member name="T:Emc.Documentum.FS.Services.Core.SchemaServicePortChannel">
            <exclude/>
        </member>
        <member name="T:Emc.Documentum.FS.Services.Core.VersionControlServicePortClient">
            <exclude/>
            <exclude/>
        </member>
        <member name="T:Emc.Documentum.FS.Services.Core.IVersionControlService">
            <summary>
            The version control service provides operations that enable access and changes to specific object versions.
            <seealso cref="T:Emc.Documentum.FS.DataModel.Core.OperationOptions"/>
            </summary>
        </member>
        <member name="M:Emc.Documentum.FS.Services.Core.IVersionControlService.Checkout(Emc.Documentum.FS.DataModel.Core.ObjectIdentitySet,Emc.Documentum.FS.DataModel.Core.OperationOptions)">
            <summary>
            Performs checkout operation for a set of repository objects. Any version of the object can be checked out.
            </summary>
            <param name="objectIdentitySet">A collection of ObjectIdentity instances that uniquely identify the repository objects                           to check out.</param>
            <param name="options">An object containing profiles and properties that specify operation behaviors. If this object                     is null, default operation behaviors will take effect.                     It can contain CheckoutProfile that will modify the behaviour of the operation.                      OperationOptions can contain PropertyProfile, ContentProfile, PermissionProfile,                     RelationshipProfile that will be used to populate the returned DataPackage. Also it can contain ContentTransferProfile to specify the specifics of content transfer.</param>
            <returns>resulting DataObject. By default, it will return DataObject with all content. PropertyProfile and ContentProfile settings can be used to specify what data is populated.</returns>
            <exception cref="T:Emc.Documentum.FS.Runtime.CoreServiceException"/>
        </member>
        <member name="M:Emc.Documentum.FS.Services.Core.IVersionControlService.Checkin(Emc.Documentum.FS.DataModel.Core.DataPackage,Emc.Documentum.FS.DataModel.Core.VersionStrategy,System.Boolean,System.Collections.Generic.List{System.String},Emc.Documentum.FS.DataModel.Core.OperationOptions)">
            <summary>
            Checks in a set of repository objects using data contained in a DataPackage. It provides control over how the  checked in object is versioned and whether the object remains checked out and locked by the user after the  changes are versioned, and provides a mechanism for applying symbolic version labels to the checked-in versions.  The ObjectIdentity of each DataObject passed to the operation is expected to match the identity of a checked out  repository object.<para/>
            </summary>
            <param name="dataPackage">Contains a set of DataObject instances that are to be checked in as new versions of checked                     out repository objects.</param>
            <param name="versionStrategy">Specifies option for incrementing the version number of the new version.</param>
            <param name="isRetainLock">Specifies whether the object is to remain checked out and locked by the user after the new                         version is saved.</param>
            <param name="symbolicLabels">optional parameter that allows to set custom version labels for the objects.</param>
            <param name="options">An object containing profiles and properties that specify operation behaviors. If this object                     is null, default operation behaviors will take effect.                     It can contain CheckinProfile that will modify the behaviour of the operation.                     OperationOptions can also contain PropertyProfile, ContentProfile, PermissionProfile,                     RelationshipProfile that will be used to populate the returned DataPackage. Also it can contain ContentTransferProfile to specify the specifics of content transfer.</param>
            <returns>resulting DataPackage. By default, it will only return ObjectIdentity filled in for each DataObject.</returns>
            <exception cref="T:Emc.Documentum.FS.Runtime.CoreServiceException"/>
        </member>
        <member name="M:Emc.Documentum.FS.Services.Core.IVersionControlService.GetCurrent(Emc.Documentum.FS.DataModel.Core.ObjectIdentitySet,Emc.Documentum.FS.DataModel.Core.OperationOptions)">
            <summary>
            Retrieves objects from the repository and returns them in the Data Package.  This operation will  walk the version tree and return the CURRENT object.  It will return the current version for the object pointed  by the object Identity regardless of its position in the version tree.  <para/>  Note: If it is necessary to retrieve objects by Label, version, etc please use QueryService.
            </summary>
            <param name="forObjects">A collection of ObjectIdentity instances that uniquely identify the repository objects of                     which the CURRENT version will be exported.</param>
            <param name="options">An object containing profiles and properties that specify operation behaviors. If this object                     is null, default operation behaviors will take effect.                     OperationOptions can contain PropertyProfile, ContentProfile, PermissionProfile,                     RelationshipProfile that will be used to populate the returned DataPackage. Also it can                     contain ContentTransferProfile to specify the specifics of content transfer.</param>
            <returns>in case no filters defined DataObjects will be populated with their ReferenceRelations and properties as          PropertyFilterMode.ALL_NON_SYSTEM.</returns>
            <exception cref="T:Emc.Documentum.FS.Runtime.CoreServiceException"/>
        </member>
        <member name="M:Emc.Documentum.FS.Services.Core.IVersionControlService.CancelCheckout(Emc.Documentum.FS.DataModel.Core.ObjectIdentitySet)">
            <summary>
            Performs cancel checkout for the specified objects.
            </summary>
            <param name="objectIdentitySet">A collection of ObjectIdentity instances that uniquely identify the repository objects                           to check out.</param>
            <exception cref="T:Emc.Documentum.FS.Runtime.CoreServiceException"/>
        </member>
        <member name="M:Emc.Documentum.FS.Services.Core.IVersionControlService.GetCheckoutInfo(Emc.Documentum.FS.DataModel.Core.ObjectIdentitySet)">
            <summary>
            Provides checkout information about the specified objects, specifically whether the objects are checked out, and  the user name of the user who has them checked out.
            </summary>
            <param name="objectIdentitySet">A collection of ObjectIdentity instances that uniquely identify the repository objects                            about which to obtain checkout information.</param>
            <returns>Returns a List of CheckoutInfo instances. Checkout info encapsulates data about a specific checked out          repository object.</returns>
            <exception cref="T:Emc.Documentum.FS.Runtime.CoreServiceException"/>
        </member>
        <member name="M:Emc.Documentum.FS.Services.Core.IVersionControlService.GetVersionInfo(Emc.Documentum.FS.DataModel.Core.ObjectIdentitySet)">
            <summary>
            Provides information about a version of a repository object.
            </summary>
            <param name="objectIdentitySet">A collection of ObjectIdentity instances that uniquely identify the repository objects                           about which to provide version information.</param>
            <returns>Returns a List of VersionInfo instances corresponding to the DataObject instances in the ObjectIdentitySet.</returns>
            <exception cref="T:Emc.Documentum.FS.Runtime.CoreServiceException"/>
        </member>
        <member name="M:Emc.Documentum.FS.Services.Core.IVersionControlService.DeleteVersion(Emc.Documentum.FS.DataModel.Core.ObjectIdentitySet)">
            <summary>
            Deletes a specific version of a repository object. If the deleted object is the CURRENT version, the previous  version in the version tree is promoted to CURRENT.
            </summary>
            <param name="objectsToDelete">A collection of ObjectIdentity instances that uniquely identify the repository object                         versions to delete.</param>
            <exception cref="T:Emc.Documentum.FS.Runtime.CoreServiceException"/>
        </member>
        <member name="M:Emc.Documentum.FS.Services.Core.IVersionControlService.DeleteAllVersions(Emc.Documentum.FS.DataModel.Core.ObjectIdentitySet)">
            <summary>
            Deletes all versions of a repository object. An ObjectIdentity indicating the object to delete can reference any  version in the version tree.
            </summary>
            <param name="objectIdentitySet">A collection of ObjectIdentity instances that uniquely identify the repository objects                           of which to delete all versions.</param>
            <exception cref="T:Emc.Documentum.FS.Runtime.CoreServiceException"/>
        </member>
        <member name="T:Emc.Documentum.FS.Services.Core.VersionControlServicePort">
            <exclude/>
        </member>
        <member name="T:Emc.Documentum.FS.Services.Core.checkoutRequest">
            <exclude/>
        </member>
        <member name="T:Emc.Documentum.FS.Services.Core.checkoutResponse">
            <exclude/>
        </member>
        <member name="T:Emc.Documentum.FS.Services.Core.checkinRequest">
            <exclude/>
        </member>
        <member name="T:Emc.Documentum.FS.Services.Core.checkinResponse">
            <exclude/>
        </member>
        <member name="T:Emc.Documentum.FS.Services.Core.getCurrentRequest">
            <exclude/>
        </member>
        <member name="T:Emc.Documentum.FS.Services.Core.getCurrentResponse">
            <exclude/>
        </member>
        <member name="T:Emc.Documentum.FS.Services.Core.cancelCheckoutRequest">
            <exclude/>
        </member>
        <member name="T:Emc.Documentum.FS.Services.Core.cancelCheckoutResponse">
            <exclude/>
        </member>
        <member name="T:Emc.Documentum.FS.Services.Core.getCheckoutInfoRequest">
            <exclude/>
        </member>
        <member name="T:Emc.Documentum.FS.Services.Core.getCheckoutInfoResponse">
            <exclude/>
        </member>
        <member name="T:Emc.Documentum.FS.Services.Core.getVersionInfoRequest">
            <exclude/>
        </member>
        <member name="T:Emc.Documentum.FS.Services.Core.getVersionInfoResponse">
            <exclude/>
        </member>
        <member name="T:Emc.Documentum.FS.Services.Core.deleteVersionRequest">
            <exclude/>
        </member>
        <member name="T:Emc.Documentum.FS.Services.Core.deleteVersionResponse">
            <exclude/>
        </member>
        <member name="T:Emc.Documentum.FS.Services.Core.deleteAllVersionsRequest">
            <exclude/>
        </member>
        <member name="T:Emc.Documentum.FS.Services.Core.deleteAllVersionsResponse">
            <exclude/>
        </member>
        <member name="T:Emc.Documentum.FS.Services.Core.VersionControlServicePortChannel">
            <exclude/>
        </member>
        <member name="T:Emc.Documentum.FS.Services.Search.SearchServicePortClient">
            <exclude/>
            <exclude/>
        </member>
        <member name="T:Emc.Documentum.FS.Services.Search.ISearchService">
            <summary>
            SearchService is a primary mechanism for searching objects  in multiple docbases and external repositories.<para/> It provides basic operations for listing the available repositories and  searching objects in theses sources.<para/> External Repositories will only be available when ECI Services option is configured and connected to the DFS System through the DFC.
            <seealso cref="T:Emc.Documentum.FS.DataModel.Core.OperationOptions"/>
            <seealso cref="T:Emc.Documentum.FS.DataModel.Core.Profiles.Profile"/>
            </summary>
        </member>
        <member name="M:Emc.Documentum.FS.Services.Search.ISearchService.GetRepositoryList(Emc.Documentum.FS.DataModel.Core.OperationOptions)">
            <summary>
            This service returns the list of available repositories.<para/> The Repository can either be a Docbase (MANAGED) source or an EXTERNAL source, if ECI Services option is connected.
            </summary>
            <param name="options">An object containing profiles and properties that specify operation behaviors. If this object is null, default operation behaviors will take effect. (Not used in D6, future use only)</param>
            <returns>The List of Repositories that can be searched through the execute method of this SearchService</returns>
        </member>
        <member name="M:Emc.Documentum.FS.Services.Search.ISearchService.Execute(Emc.Documentum.FS.DataModel.Core.Query.Query,Emc.Documentum.FS.DataModel.Core.Query.QueryExecution,Emc.Documentum.FS.DataModel.Core.OperationOptions)">
            <summary>
            Executes the query against the search repositories and returns the results as well as the Query execution status.<para/>The operation returns a QueryResult object that is composed of the QueryStatus, that contains search statuses for  every targeted repository and a DataPackage that contains the expected subset of results.<p/>   This service is synchronous: the search engine waits for having retrieved all the needed results  before returning back to the client.
            </summary>
            <param name="query">The query contains the query definition (i.e. the constraints) as well as the repositories to search.</param>
            <param name="execution">Contains the execution parameters, that is the number of results to return and their indexes in the global results Set.</param>
            <param name="options">The object containing the PropertyProfile that defines which data will be returned as results. If this object is null, default operation behaviors will take effect.</param>
            <returns>The QueryResult contains the QueryStatus that aggregates the repository statuses and the dataPackage representing the found results.</returns>
        </member>
        <member name="T:Emc.Documentum.FS.Services.Search.SearchServicePort">
            <exclude/>
        </member>
        <member name="T:Emc.Documentum.FS.Services.Search.getRepositoryListRequest">
            <exclude/>
        </member>
        <member name="T:Emc.Documentum.FS.Services.Search.getRepositoryListResponse">
            <exclude/>
        </member>
        <member name="T:Emc.Documentum.FS.Services.Search.executeRequest">
            <exclude/>
        </member>
        <member name="T:Emc.Documentum.FS.Services.Search.executeResponse">
            <exclude/>
        </member>
        <member name="T:Emc.Documentum.FS.Services.Search.SearchServicePortChannel">
            <exclude/>
        </member>
    </members>
</doc>
