#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.34014
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace TILDE.Db
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="TILDE")]
	public partial class TILDEDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InsertDebt(Debt instance);
    partial void UpdateDebt(Debt instance);
    partial void DeleteDebt(Debt instance);
    partial void InsertUser(User instance);
    partial void UpdateUser(User instance);
    partial void DeleteUser(User instance);
    #endregion
		
		public TILDEDataContext() : 
				base(global::TILDE.Db.Properties.Settings.Default.TILDEConnectionString1, mappingSource)
		{
			OnCreated();
		}
		
		public TILDEDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public TILDEDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public TILDEDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public TILDEDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<Debt> Debts
		{
			get
			{
				return this.GetTable<Debt>();
			}
		}
		
		public System.Data.Linq.Table<User> Users
		{
			get
			{
				return this.GetTable<User>();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Debt")]
	public partial class Debt : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private int _BorrowerId;
		
		private int _СreditorId;
		
		private int _Amount;
		
		private EntityRef<User> _Borrower;
		
		private EntityRef<User> _Сreditor;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnBorrowerIdChanging(int value);
    partial void OnBorrowerIdChanged();
    partial void OnСreditorIdChanging(int value);
    partial void OnСreditorIdChanged();
    partial void OnAmountChanging(int value);
    partial void OnAmountChanged();
    #endregion
		
		public Debt()
		{
			this._Borrower = default(EntityRef<User>);
			this._Сreditor = default(EntityRef<User>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_BorrowerId", DbType="Int NOT NULL")]
		public int BorrowerId
		{
			get
			{
				return this._BorrowerId;
			}
			set
			{
				if ((this._BorrowerId != value))
				{
					if (this._Borrower.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnBorrowerIdChanging(value);
					this.SendPropertyChanging();
					this._BorrowerId = value;
					this.SendPropertyChanged("BorrowerId");
					this.OnBorrowerIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_СreditorId", DbType="Int NOT NULL")]
		public int СreditorId
		{
			get
			{
				return this._СreditorId;
			}
			set
			{
				if ((this._СreditorId != value))
				{
					if (this._Сreditor.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnСreditorIdChanging(value);
					this.SendPropertyChanging();
					this._СreditorId = value;
					this.SendPropertyChanged("СreditorId");
					this.OnСreditorIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Amount", DbType="Int NOT NULL")]
		public int Amount
		{
			get
			{
				return this._Amount;
			}
			set
			{
				if ((this._Amount != value))
				{
					this.OnAmountChanging(value);
					this.SendPropertyChanging();
					this._Amount = value;
					this.SendPropertyChanged("Amount");
					this.OnAmountChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_Debt", Storage="_Borrower", ThisKey="BorrowerId", OtherKey="Id", IsForeignKey=true)]
		public User Borrower
		{
			get
			{
				return this._Borrower.Entity;
			}
			set
			{
				User previousValue = this._Borrower.Entity;
				if (((previousValue != value) 
							|| (this._Borrower.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Borrower.Entity = null;
						previousValue.Borrowers.Remove(this);
					}
					this._Borrower.Entity = value;
					if ((value != null))
					{
						value.Borrowers.Add(this);
						this._BorrowerId = value.Id;
					}
					else
					{
						this._BorrowerId = default(int);
					}
					this.SendPropertyChanged("Borrower");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_Debt1", Storage="_Сreditor", ThisKey="СreditorId", OtherKey="Id", IsForeignKey=true)]
		public User Сreditor
		{
			get
			{
				return this._Сreditor.Entity;
			}
			set
			{
				User previousValue = this._Сreditor.Entity;
				if (((previousValue != value) 
							|| (this._Сreditor.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Сreditor.Entity = null;
						previousValue.Сreditors.Remove(this);
					}
					this._Сreditor.Entity = value;
					if ((value != null))
					{
						value.Сreditors.Add(this);
						this._СreditorId = value.Id;
					}
					else
					{
						this._СreditorId = default(int);
					}
					this.SendPropertyChanged("Сreditor");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.[User]")]
	public partial class User : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private string _UserName;
		
		private EntitySet<Debt> _Borrowers;
		
		private EntitySet<Debt> _Сreditors;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnUserNameChanging(string value);
    partial void OnUserNameChanged();
    #endregion
		
		public User()
		{
			this._Borrowers = new EntitySet<Debt>(new Action<Debt>(this.attach_Borrowers), new Action<Debt>(this.detach_Borrowers));
			this._Сreditors = new EntitySet<Debt>(new Action<Debt>(this.attach_Сreditors), new Action<Debt>(this.detach_Сreditors));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserName", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string UserName
		{
			get
			{
				return this._UserName;
			}
			set
			{
				if ((this._UserName != value))
				{
					this.OnUserNameChanging(value);
					this.SendPropertyChanging();
					this._UserName = value;
					this.SendPropertyChanged("UserName");
					this.OnUserNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_Debt", Storage="_Borrowers", ThisKey="Id", OtherKey="BorrowerId")]
		public EntitySet<Debt> Borrowers
		{
			get
			{
				return this._Borrowers;
			}
			set
			{
				this._Borrowers.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_Debt1", Storage="_Сreditors", ThisKey="Id", OtherKey="СreditorId")]
		public EntitySet<Debt> Сreditors
		{
			get
			{
				return this._Сreditors;
			}
			set
			{
				this._Сreditors.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Borrowers(Debt entity)
		{
			this.SendPropertyChanging();
			entity.Borrower = this;
		}
		
		private void detach_Borrowers(Debt entity)
		{
			this.SendPropertyChanging();
			entity.Borrower = null;
		}
		
		private void attach_Сreditors(Debt entity)
		{
			this.SendPropertyChanging();
			entity.Сreditor = this;
		}
		
		private void detach_Сreditors(Debt entity)
		{
			this.SendPropertyChanging();
			entity.Сreditor = null;
		}
	}
}
#pragma warning restore 1591
